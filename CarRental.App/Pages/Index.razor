@page "/"
@using CarRental.Business.Classes
@using CarRental.Common.Classes;
@using CarRental.Common.Enums
@using CarRental.Common.Extensions;
@using CarRental.Common.Interfaces;
@inject BookingProcessor bp


<PageTitle>Car Rental</PageTitle>

@* Unforseen error*@
@if (uiinput.unforseenError != string.Empty)
{
    <div class="alert alert-danger" role="alert">@uiinput.unforseenError</div>
}


<h3>Customers</h3>
@* Error messages for adding customer *@
@if (uiinput.addCustomerErrors.Count > 0)
{
    <div class="alert alert-warning" role="alert">
        Error! Please provide:
        <ul>
            @foreach (var error in uiinput.addCustomerErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@* Customer table *@
<table class="table w-50 mb-4 align-middle">
    <thead>
        <tr>
            @* <th scope="col">ID</th> *@
            <th scope="col">SSN</th>
            <th scope="col">Last Name</th>
            <th scope="col">First Name</th>
            <th scope="col">Action</th>
        </tr>
    </thead>

    <tbody>
        <tr class="table-primary">
            @* <td></td> *@
            <td><input class="col-xs-4 form-control" @bind="uiinput.newSsn" placeholder="@uiinput.LengthSsn digit SSN" maxlength="5" /></td>
            <td><input class="col-xs-4 form-control" @bind="uiinput.newLastName" placeholder="Last Name" maxlength="30" /></td>
            <td><input class="col-xs-4 form-control" @bind="uiinput.newFirstName" placeholder="First Name" maxlength="30" /></td>
            <td><button class="btn btn-sm btn-primary" @onclick="(() => bp.AddCustomer(uiinput))">Add Customer</button></td>
        </tr>
        @foreach (var person in bp.GetCustomers().OrderBy(c => c.LastName).ThenBy(c => c.FirstName).ToList())
        {
        <tr>
            @* <td>@person.Id</td> *@
            <td>@person.Ssn</td>
            <td>@person.LastName</td>
            <td>@person.FirstName</td>
            <td></td>
        </tr>
        }
    </tbody>
</table>

<h3>Rent and return</h3>
@* Error messages for rent and return*@
@if (uiinput.rentReturnError != string.Empty)
{
    <div class="alert alert-warning" role="alert">@uiinput.rentReturnError</div>
}

<h5>Select customer to rent next car</h5>
<div class="w-25 mb-4">
    <select class="form-select" @bind=uiinput.rentCustomerId>
        @foreach (var c in bp.GetCustomers().OrderBy(cust => cust.LastName).ToList())
        {
            <option value="@c.Id">@c.CustomerOutput</option>
        }
    </select>
</div>

<h5>Choose return date (Rent date is set to todays date)</h5>
<div class="w-25 mb-4">
    @* <form> *@
        @* <label>Enter a rent date:</label>
        <input type="date" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")">
        <br><br> *@
    <input class="@(uiinput.returnDate is null ? "bg-danger-subtle" : "") form-control" @bind="uiinput.returnDate" type="date" min="@DateTime.Now.Date.ToString("yyyy-MM-dd")">
    @* </form> *@
</div>

<h3>Vehicles</h3>
@* Error messages for adding vehicles *@
@if (uiinput.addVehicleErrors.Count > 0)
{
    <div class="alert alert-warning" role="alert">
        Error! Please provide:
        <ul>
            @foreach (var error in uiinput.addVehicleErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@* Filter vehicles*@
<h5>Filter vehicle list</h5>
<div class="btn-group btn-group-sm" role="group" aria-label="Filter vehicle table">
    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked>
    <label for="btnradio1" class="btn btn-outline-secondary" @onclick="@(() => uiinput.vStatus = default)">Show all</label>

    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
    <label for="btnradio2" class="btn btn-outline-success" @onclick="@(() => uiinput.vStatus = VehicleStatuses.Available)">Show available</label>
    
    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
    <label for="btnradio3" class="btn btn-outline-danger" @onclick="@(() => uiinput.vStatus = VehicleStatuses.Booked)">Show booked</label>

</div>
<span class="align-middle ms-4"><strong>Displaying @bp.GetVehicles(uiinput.vStatus).Count() of @bp.GetVehicles().Count() vehicles</strong></span>

@* Vehicle table *@
<table id="vehicleTable" class="table mb-4 align-middle">
    <thead>
        <tr>
            @* <th scope="col">ID</th> *@
            <th scope="col">RegNo</th>
            <th scope="col">Make</th>
            <th scope="col">Odometer [km]</th>
            <th scope="col">Cost per km [SEK]</th>
            <th scope="col">Vehicle Type</th>
            <th scope="col">Cost per day [SEK]</th>
            <th scope="col">Action</th>
            <th scope="col" class="text-center" style="width: 100px">Vehicle status</th>
        </tr>
    </thead>
    <tbody class="table-group-divider">
        @* Add vehicle *@
        <tr class="table-primary">
            @* <td></td> *@
            <td><input class="col-xs-4 form-control" @bind="uiinput.newRegNo" minlength="1" maxlength="6" disabled="@bp.Processing" /></td>
            <td><input class="col-xs-4 form-control" @bind="uiinput.newMake" maxlength="30" disabled="@bp.Processing" /></td>
            <td><input class="col-xs-4 form-control" @bind="uiinput.newOdometer" maxlength="10" disabled="@bp.Processing" /></td>
            <td><input class="col-xs-4 form-control" @bind="uiinput.newCostKm" maxlength="5" disabled="@bp.Processing" /></td>
            <td>
                <select class="form-select me-4" @bind=uiinput.newVehicleType disabled="@bp.Processing">
                @foreach (var vT in bp.VehicleTypeNames)
                {
                    <option value="@vT">@vT</option>
                }
                </select>
            </td>
            <td><input class="col-xs-4 form-control" @bind="uiinput.newCostDay" maxlength="5" disabled="@bp.Processing" /></td>
            <td>
                <button class="btn btn-sm btn-primary" @onclick="(() => bp.AddVehicle(uiinput))" disabled="@bp.Processing">Add Vehicle</button>
            </td>
            <td class="text-center">
            @if (bp.Processing)
            {
                <div class="spinner-border text-warning" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            </td>
        </tr>

        @* Show existing vehicles *@
        @foreach (var vehicle in bp.GetVehicles(uiinput.vStatus))
        {
        <tr>
            @* <td>@vehicle.Id</td> *@
            <td>@vehicle.RegNo</td>
            <td>@vehicle.Make</td>
            <td>@vehicle.Odometer</td>
            <td>@vehicle.CostKm</td>
            <td>@vehicle.VehicleType</td>
            <td>@vehicle.CostDay</td>
            @* Actions *@
            @if (vehicle.VehicleStatus is Common.Enums.VehicleStatuses.Available)
            {
                <td>
                        <button class="btn btn-sm btn-outline-success form-control-sm" @onclick="async () => await bp.RentVehicle(vehicle.Id, uiinput.rentCustomerId)" disabled="@bp.Processing">Rent</button>
                </td>
            }
            else
            {
                <td>
                    <div class="input-group input-group-sm">
                            <input class="form-control" @bind="uiinput.rentDrivenKm" type="text" min="1" max="10000" placeholder="Driven distance" disabled="@bp.Processing" />
                            <button class="form-control btn btn-sm btn-outline-warning" @onclick="(() => bp.ReturnVehicle(vehicle.Id, uiinput))" disabled="@bp.Processing">Return</button>
                    </div>
                </td>
            }
            <td class="text-center"> 
                <span class="badge text-bg-@(vehicle.VehicleStatus is Common.Enums.VehicleStatuses.Available ? "success" : "danger")">
                @vehicle.VehicleStatus
                </span>
            </td>
        </tr>

        }
    </tbody>
</table>

@* Remove vehicle (For testing)*@
@* <div>
    <input type="number" @bind="carIndexToRemove" />
    <button @onclick="RemoveCar">Remove</button>
</div> *@


<h3>Bookings</h3>
<table class="table table-hover mb-4">
    <thead>
        <tr>
            <th scope="col">RegNo</th>
            <th scope="col">Customer</th>
            <th scope="col">Odometer rented [km]</th>
            <th scope="col">Odometer returned [km]</th>
            <th scope="col">Date rented</th>
            <th scope="col">Date returned</th>
            <th scope="col">Cost [SEK]</th>
            <th scope="col" class="text-center" style="width: 100px">Booking status</th>
        </tr>
    </thead>

    <tbody class="table-group-divider">
    @foreach (var b in bp.GetBookings())
    {
        if (b.BookingValid is false) continue;
        <tr>
            <td>@b.Vehicle.RegNo</td>
            <td>@b.Customer.CustomerOutput</td>
            <td>@b.OdometerRented</td>
            <td>@b.OdometerReturned</td>
            <td>@b.DateRented.ToString("dd/MM/yyyy")</td>
            <td>@b.DateReturned?.ToString("dd/MM/yyyy")</td>
            <td>@(b.Cost > 0 ? Math.Round(b.Cost, 2) : "")</td>
            <td class="text-center">
                <span class="badge
            text-bg-@(b.BookingClosed ? "primary" : "warning")">
                    @(b.BookingClosed ? "Closed" : "Open")
                </span>
            </td>
        </tr>
        }
    </tbody>
</table>

@code
{
    UIinput uiinput = new();

    
    //For testing
    /*int carIndexToRemove;
    void RemoveCar()
        {
        bp.RemoveCar(carIndexToRemove);
    }*/
}
