@page "/"
@using CarRental.Business.Classes
@using CarRental.Common.Enums
@using CarRental.Common.Extensions;
@inject BookingProcessor bp


<PageTitle>Car Rental</PageTitle>

@* Error messages *@
@if (errors.Count > 0)
{
    <div class="alert alert-warning" role="alert">
        Error! Please provide:
        <ul>
            @foreach (var error in errors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<h3>Customers</h3>
<table class="table table-hover w-50 mb-4">
    <thead>
        <tr>
            <th scope="col">SSN</th>
            <th scope="col">Last Name</th>
            <th scope="col">First Name</th>
        </tr>
    </thead>

    <tbody class="table-group-divider">
        <tr>
            <td><input class="form-control-sm" @bind="newSsn" placeholder="@LengthSsn digit SSN" maxlength="5" /></td>
            <td><input class="form-control-sm" @bind="newLastName" placeholder="Last Name" maxlength="30" /></td>
            <td><input class="form-control-sm" @bind="newFirstName" placeholder="First Name" maxlength="30" /></td>
            <td><button class="btn btn-sm btn-outline-success" @onclick="AddCustomer">Add</button></td>
        </tr>
        @foreach (var person in bp.GetCustomers())
        {
        <tr>
            <td>@person.Ssn</td>
            <td>@person.LastName</td>
            <td>@person.FirstName</td>
            <td></td>
        </tr>
        }
    </tbody>
</table>

<h3>Vehicles</h3>
@* Filter *@
<div class="btn-group btn-group-sm" role="group" aria-label="Filter vehicle table">
    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" checked>
    <label for="btnradio1" class="btn btn-outline-primary" @onclick="@(() => vStatus = default)">Show all</label>

    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off">
    <label for="btnradio2" class="btn btn-outline-success" @onclick="@(() => vStatus = VehicleStatuses.Available)">Show available</label>
    
    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off">
    <label for="btnradio3" class="btn btn-outline-danger" @onclick="@(() => vStatus = VehicleStatuses.Booked)">Show booked</label>
</div>
<table class="table table-hover mb-4">
    <thead>
        <tr>
            <th scope="col">RegNo</th>
            <th scope="col">Make</th>
            <th scope="col">Odometer [km]</th>
            <th scope="col">Cost per km [SEK]</th>
            <th scope="col">Vehicle Type</th>
            <th scope="col">Cost per day [SEK]</th>
            <th scope="col" class="text-center" style="width: 100px">Status</th>
        </tr>
    </thead>

    <tbody class="table-group-divider">
        <tr>
            <td><input class="form-control-sm" @bind="newRegNo" maxlength="6" /></td>
            <td><input class="form-control-sm" @bind="newMake" maxlength="30" /></td>
            <td><input class="form-control-sm" @bind="newOdometer" maxlength="10" /></td>
            <td><input class="form-control-sm" @bind="newCostKm" maxlength="5" /></td>
            <td>
                <select class="form-select form-select-sm" @bind=newVehicleType>
                    @foreach (var vT in Enum.GetValues(typeof(VehicleTypes)))
                    {
                        <option value="@vT">@vT</option>
                    }
                </select>
            </td>
            <td><input class="form-control-sm" @bind="newCostDay" maxlength="5" /></td>
            <td class="text-center"><button class="btn btn-sm btn-outline-success" @onclick="AddVehicle">Add</button></td>
        </tr>
        @foreach (var vehicle in bp.GetVehicles(vStatus))
        {
        <tr>
            <td>@vehicle.RegNo</td>
            <td>@vehicle.Make</td>
            <td>@vehicle.Odometer</td>
            <td>@vehicle.CostKm</td>
            <td>@vehicle.VehicleType</td>
            <td>@vehicle.CostDay</td>
            <td class="text-center"> <span class="badge 
                text-bg-@(vehicle.VehicleStatus is Common.Enums.VehicleStatuses.Available ? "success" : "danger")">
                @vehicle.VehicleStatus
                </span>
            </td>
        </tr>
        }
    </tbody>
</table>
<div>
    <input type="number" @bind="carIndexToRemove" />
    <button @onclick="RemoveCar">Remove</button>
</div>

<h3>Bookings</h3>
<table class="table table-hover mb-4">
    <thead>
        <tr>
            <th scope="col">RegNo</th>
            <th scope="col">Customer</th>
            <th scope="col">Odometer rented [km]</th>
            <th scope="col">Odometer returned [km]</th>
            <th scope="col">Date rented</th>
            <th scope="col">Date returned</th>
            <th scope="col">Cost [SEK]</th>
            <th scope="col" class="text-center" style="width: 100px">Booking status</th>
        </tr>
    </thead>

    <tbody class="table-group-divider">
        @foreach (var b in bp.GetBookings())
        {
            if (b.BookingValid is false) continue;
            <tr>
                <td>@b.Vehicle.RegNo</td>
                <td>@b.Customer.CustomerOutput</td>
                <td>@b.OdometerRented</td>
                <td>@b.OdometerReturned</td>
                <td>@b.DateRented.ToString("dd/MM/yyyy")</td>
                <td>@b.DateReturned?.ToString("dd/MM/yyyy")</td>
                <td>@(b.Cost > 0 ? Math.Round(b.Cost, 2) : "")</td>
                <td class="text-center">
                    <span class="badge
                text-bg-@(b.BookingClosed ? "primary" : "warning")">
                        @(b.BookingClosed ? "Closed" : "Open")
                    </span>
                </td>
            </tr>
        }
    </tbody>
</table>

@code
{
    VehicleStatuses vStatus = default;

    List<string> errors = new();


    /* New customer */
    bool inputErrorCustomer = false;
    string newSsn = string.Empty, newFirstName = string.Empty, newLastName = string.Empty;
    const int LengthSsn = 5, minLengthName = 2;

    /* New vehicle */
    bool inputErrorVehicle = false;
    string newRegNo = string.Empty, newMake = string.Empty;
    VehicleTypes newVehicleType;
    double? newCostKm = null;
    int? newCostDay = null, newOdometer = null;
    const int LengthRegNo = 6, minLengthMake = 2;

    void AddCustomer()
    {
        inputErrorCustomer = false;
        errors = new();

        if (newSsn.Length != LengthSsn || !newSsn.IsNumber())
        {
            errors.Add($"SSN with {LengthSsn} digits and no leading zeros");
            inputErrorCustomer = true;
        }

        if (newFirstName.Length < minLengthName || !newFirstName.IsLettersOnly() || newLastName.Length < minLengthName || !newLastName.IsLettersOnly())
        {
            errors.Add($"First and last name with at least {minLengthName} letters");
            inputErrorCustomer = true;
        }
        if (newSsn.IsNumber() && bp.GetCustomers().Any(c => c.Ssn == (int.Parse(newSsn))))
        {
            errors.Add($"SSN that does not exist in database yet");
            inputErrorCustomer = true;
        }

        if (inputErrorCustomer) return;

        // Already checked before that newSsn is a number
        bp.AddCustomer(int.Parse(newSsn), newFirstName, newLastName);
        newSsn = newFirstName = newLastName = string.Empty;
    }

    void AddVehicle()
    {
        inputErrorVehicle = false;
        errors = new();

        if (newRegNo.Length != LengthRegNo)
        {
            errors.Add($"Registration number with {LengthRegNo} characters");
            inputErrorVehicle = true;
        }

        if (bp.GetVehicles().Any(v => v.RegNo == newRegNo))
        {
            errors.Add($"Registration number that does not exist in database yet");
            inputErrorVehicle = true;
        }

        if (newMake.Length < minLengthMake)
        {
            errors.Add($"Make name with at least {minLengthMake} characters");
            inputErrorVehicle = true;
        }
        if (newOdometer is null || newCostKm is null || newCostDay is null)
        {
            errors.Add($"Odometer value (int), Cost per km (double) and Cost per day (int) ");
            inputErrorVehicle = true;
        }
        if (inputErrorVehicle) return;

        // Already null checked before
        bp.AddVehicle(newRegNo, newMake, (int)newOdometer, newVehicleType, (double)newCostKm, (int)newCostDay);
    }

    int carIndexToRemove;
    void RemoveCar()
    {
        bp.RemoveCar(carIndexToRemove);
    }
}
